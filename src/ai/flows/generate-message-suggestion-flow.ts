// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A flow for generating personalized message suggestions based on user input and the current day of the challenge.
 *
 * - generateMessageSuggestion - A function that generates a message suggestion.
 * - GenerateMessageSuggestionInput - The input type for the generateMessageSuggestion function.
 * - GenerateMessageSuggestionOutput - The return type for the generateMessageSuggestion function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateMessageSuggestionInputSchema = z.object({
  challengeDay: z
    .number()
    .describe('The current day of the 7-day challenge (1-7).'),
  userInput: z
    .string()
    .describe('The user provided background details on the conversation.'),
});
export type GenerateMessageSuggestionInput = z.infer<typeof GenerateMessageSuggestionInputSchema>;

const GenerateMessageSuggestionOutputSchema = z.object({
  suggestedMessage: z
    .string()
    .describe('The AI suggested message for the user to send.'),
});
export type GenerateMessageSuggestionOutput = z.infer<typeof GenerateMessageSuggestionOutputSchema>;

export async function generateMessageSuggestion(
  input: GenerateMessageSuggestionInput
): Promise<GenerateMessageSuggestionOutput> {
  return generateMessageSuggestionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateMessageSuggestionPrompt',
  input: {schema: GenerateMessageSuggestionInputSchema},
  output: {schema: GenerateMessageSuggestionOutputSchema},
  prompt: `You are an AI assistant designed to help users craft effective messages as part of a 7-day challenge to improve their dating lives.

You will receive the current day of the challenge and user input containing background details on the conversation.

Based on this information, suggest a message that aligns with the goals of the challenge and takes into account psychological principles to maximize engagement.

Challenge Day: {{{challengeDay}}}
User Input: {{{userInput}}}

Suggested Message:`,
});

const generateMessageSuggestionFlow = ai.defineFlow(
  {
    name: 'generateMessageSuggestionFlow',
    inputSchema: GenerateMessageSuggestionInputSchema,
    outputSchema: GenerateMessageSuggestionOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
